name: NACF CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: nacf
  KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      run: |
        python -m pytest tests/unit -v --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=schedule,pattern={{date 'YYYYMMDD'}}-{{sha}},enable=${{ github.event_name == 'schedule' }}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,format=long

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.0'

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to staging environment..."
        kubectl config use-context ${{ secrets.KUBE_CONTEXT_STAGING }}
        kubectl apply -k ./infra/kubernetes/overlays/staging
        
        # Wait for deployment to complete
        kubectl rollout status deployment/auth-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/signal-processor -n ${{ env.K8S_NAMESPACE }} --timeout=300s

  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.0'

    - name: Deploy to Production (Manual Approval)
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: '#36a64f'
        SLACK_TITLE: 'Production Deployment Ready for Approval'
        SLACK_MESSAGE: 'A new production deployment is ready for review. Please approve to proceed.'
        SLACK_USERNAME: 'NACF Deploy Bot'

    - name: Wait for approval
      uses: trstringer/manual-gate@v1
      with:
        continue_after_seconds: 3600  # 1 hour timeout
        poll_interval_seconds: 30
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        kubectl config use-context ${{ secrets.KUBE_CONTEXT_PRODUCTION }}
        kubectl apply -k ./infra/kubernetes/overlays/production
        
        # Wait for deployment to complete with blue-green strategy
        kubectl rollout status deployment/auth-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/signal-processor -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
        # Run smoke tests
        ./scripts/run-smoke-tests.sh

  notify:
    name: Notify Status
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Send Slack notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && '#ff0000' || '#36a64f' }}
        SLACK_TITLE: 'Deployment ${{ contains(needs.*.result, 'failure') && 'Failed' : 'Succeeded' }}'
        SLACK_MESSAGE: 'Deployment ${{ github.workflow }} ${{ github.sha }} ${{ contains(needs.*.result, 'failure') && 'failed' : 'completed successfully' }}'
        SLACK_USERNAME: 'NACF Deploy Bot'
